Metadata-Version: 2.4
Name: cpp_python_demo
Version: 0.0.1
Summary: A demo project for Python with C++ extensions
Author: Demo User
Author-email: Demo User <demo@example.com>
Project-URL: Homepage, https://example.com/cpp_python_demo
Project-URL: Bug Tracker, https://example.com/cpp_python_demo/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: C++
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Dynamic: author
Dynamic: requires-python

# Python C++ Extension Demo

This project demonstrates how to create a Python package that includes a C++ extension module using `pyproject.toml`, `setuptools`, and `pybind11`.

## Project Structure

```
cpp_python_demo/
├── pyproject.toml       # Build system and project metadata
├── setup.py             # Setup script for building the C++ extension
├── src/
│   └── cpp_module/
│       └── main.cpp     # C++ source code for the extension
├── python_src/
│   └── main.py          # Python script to demonstrate using the C++ module
└── README.md            # This file
```

## Prerequisites

- Python 3.7+
- A C++ compiler (e.g., GCC, Clang, MSVC)
- `uv` (a fast Python package installer and resolver). You can install it by following the instructions at [https://github.com/astral-sh/uv](https://github.com/astral-sh/uv).

## Building the Project

1.  **Ensure `uv` is installed.**

2.  **Build the package using `uv`**:

    `uv` can build the wheel and source distribution. Navigate to the `cpp_python_demo` root directory and run:
    ```bash
    uv build --sdist --wheel .
    ```
    This will create a `dist/` directory containing the built wheel (`.whl`) and source archive (`.tar.gz`).

3.  **Install the package using `uv pip`**:

    You can install the built wheel directly:
    ```bash
    uv pip install dist/cpp_python_demo-0.0.1-*.whl
    ```
    Alternatively, for development, you can install the package in editable mode directly from the project root. This command will compile the C++ extension and make the `cpp_module` available in your Python environment:
    ```bash
    uv pip install -e .
    ```

## Running the Demo

After installing the package using `uv pip install -e .` or from the wheel, you can run the example Python script:

```bash
python python_src/main.py
```

Expected Output:
```
From C++ greet function: Hello, Python User from C++!
C++ module version: 0.0.1
Initial calculator value: 10
After adding 5: 15
After subtracting 3: 12
Calculator 2 initial value: 0
Calculator 2 after adding 100: 100
```

## Explanation

-   **`pyproject.toml`**: Specifies that `setuptools` and `pybind11` are required to build the project. It also contains project metadata like name, version, author, etc.
-   **`setup.py`**: Uses `setuptools` and `Pybind11Extension` from `pybind11.setup_helpers` to define the C++ extension module (`cpp_module`). It tells setuptools to compile `src/cpp_module/main.cpp`.
-   **`src/cpp_module/main.cpp`**: Contains the C++ code. The `PYBIND11_MODULE` macro is used to create the Python bindings for the `greet` function and the `Calculator` class.
-   **`python_src/main.py`**: A simple Python script that imports `cpp_module` and calls the C++ `greet` function and uses the `Calculator` class.

This setup allows you to package C++ code alongside your Python code, which is useful for performance-critical sections or for integrating existing C++ libraries. 
